{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Med Amine EL\\\\Desktop\\\\pmi_skkr\\\\pmi_ft_amine\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { login as apiLogin } from \"../api/authApi\";\nimport { getCurrentUser } from \"../api/userApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const checkAuth = async () => {\n      setLoading(true);\n      const token = localStorage.getItem(\"token\");\n      const storedUser = localStorage.getItem(\"user\");\n      if (token && storedUser) {\n        try {\n          setUser(JSON.parse(storedUser));\n          setIsAuthenticated(true);\n          // We'll fetch the latest user data in the next useEffect\n        } catch (error) {\n          console.error(\"Error parsing stored user:\", error);\n          logout(); // Clear invalid data\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  // Fetch current user data with latest onboarding progress when authenticated\n  useEffect(() => {\n    if (user && isAuthenticated) {\n      getCurrentUser().then(updatedUser => {\n        setUser(updatedUser);\n        localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n      }).catch(error => {\n        console.error(\"Error fetching current user:\", error);\n        // If we can't get the user data, the token might be invalid\n        if (error.response && error.response.status === 401) {\n          logout();\n        }\n      });\n    }\n  }, [isAuthenticated]);\n\n  // Login\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiLogin(email, password);\n      const {\n        user,\n        token\n      } = response;\n      setUser(user);\n      setIsAuthenticated(true);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      localStorage.setItem(\"token\", token);\n      return user;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Login failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n  };\n\n  // Update user in context\n  const updateUserContext = updatedUser => {\n    setUser(updatedUser);\n    localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    isAuthenticated,\n    login,\n    logout,\n    updateUserContext\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"l7KNG3hoy7LINHlD4oe0pjaECEs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","login","apiLogin","getCurrentUser","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","isAuthenticated","setIsAuthenticated","checkAuth","token","localStorage","getItem","storedUser","JSON","parse","console","logout","then","updatedUser","setItem","stringify","catch","response","status","email","password","_error$response","_error$response$data","errorMessage","data","message","removeItem","updateUserContext","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Med Amine EL/Desktop/pmi_skkr/pmi_ft_amine/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { login as apiLogin } from \"../api/authApi\";\r\nimport { getCurrentUser } from \"../api/userApi\";\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Check if user is logged in on initial load\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      setLoading(true);\r\n      const token = localStorage.getItem(\"token\");\r\n      const storedUser = localStorage.getItem(\"user\");\r\n      \r\n      if (token && storedUser) {\r\n        try {\r\n          setUser(JSON.parse(storedUser));\r\n          setIsAuthenticated(true);\r\n          // We'll fetch the latest user data in the next useEffect\r\n        } catch (error) {\r\n          console.error(\"Error parsing stored user:\", error);\r\n          logout(); // Clear invalid data\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n    \r\n    checkAuth();\r\n  }, []);\r\n\r\n  // Fetch current user data with latest onboarding progress when authenticated\r\n  useEffect(() => {\r\n    if (user && isAuthenticated) {\r\n      getCurrentUser()\r\n        .then((updatedUser) => {\r\n          setUser(updatedUser);\r\n          localStorage.setItem(\"user\", JSON.stringify(updatedUser));\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching current user:\", error);\r\n          // If we can't get the user data, the token might be invalid\r\n          if (error.response && error.response.status === 401) {\r\n            logout();\r\n          }\r\n        });\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  // Login\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await apiLogin(email, password);\r\n      const { user, token } = response;\r\n\r\n      setUser(user);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      localStorage.setItem(\"token\", token);\r\n\r\n      return user;\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || \"Login failed\";\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"token\");\r\n  };\r\n\r\n  // Update user in context\r\n  const updateUserContext = (updatedUser) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\"user\", JSON.stringify(updatedUser));\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    updateUserContext,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}